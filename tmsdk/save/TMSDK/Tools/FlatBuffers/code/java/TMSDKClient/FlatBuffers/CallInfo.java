// automatically generated by the FlatBuffers compiler, do not modify

package TMSDKClient.FlatBuffers;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class CallInfo extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_1_12_0(); }
  public static CallInfo getRootAsCallInfo(ByteBuffer _bb) { return getRootAsCallInfo(_bb, new CallInfo()); }
  public static CallInfo getRootAsCallInfo(ByteBuffer _bb, CallInfo obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public CallInfo __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public String callMethodName() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer callMethodNameAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public ByteBuffer callMethodNameInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 1); }
  public TMSDKClient.FlatBuffers.Dict callMethodParams() { return callMethodParams(new TMSDKClient.FlatBuffers.Dict()); }
  public TMSDKClient.FlatBuffers.Dict callMethodParams(TMSDKClient.FlatBuffers.Dict obj) { int o = __offset(6); return o != 0 ? obj.__assign(__indirect(o + bb_pos), bb) : null; }
  public boolean isCallback() { int o = __offset(8); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }
  public String callbackId() { int o = __offset(10); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer callbackIdAsByteBuffer() { return __vector_as_bytebuffer(10, 1); }
  public ByteBuffer callbackIdInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 10, 1); }

  public static int createCallInfo(FlatBufferBuilder builder,
      int callMethodNameOffset,
      int callMethodParamsOffset,
      boolean isCallback,
      int callbackIdOffset) {
    builder.startTable(4);
    CallInfo.addCallbackId(builder, callbackIdOffset);
    CallInfo.addCallMethodParams(builder, callMethodParamsOffset);
    CallInfo.addCallMethodName(builder, callMethodNameOffset);
    CallInfo.addIsCallback(builder, isCallback);
    return CallInfo.endCallInfo(builder);
  }

  public static void startCallInfo(FlatBufferBuilder builder) { builder.startTable(4); }
  public static void addCallMethodName(FlatBufferBuilder builder, int callMethodNameOffset) { builder.addOffset(0, callMethodNameOffset, 0); }
  public static void addCallMethodParams(FlatBufferBuilder builder, int callMethodParamsOffset) { builder.addOffset(1, callMethodParamsOffset, 0); }
  public static void addIsCallback(FlatBufferBuilder builder, boolean isCallback) { builder.addBoolean(2, isCallback, false); }
  public static void addCallbackId(FlatBufferBuilder builder, int callbackIdOffset) { builder.addOffset(3, callbackIdOffset, 0); }
  public static int endCallInfo(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public CallInfo get(int j) { return get(new CallInfo(), j); }
    public CallInfo get(CallInfo obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

