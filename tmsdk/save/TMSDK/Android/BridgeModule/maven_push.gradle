//添加maven插件 以支持将项目发布到maven仓库
apply plugin: 'maven'

apply plugin: 'signing'

// 判断 库版本  release or snapshot
// VERSION_NAME后面加上 -SNAPSHOT
def isReleaseBuild() {
    return !VERSION_NAME.toUpperCase().contains("SNAPSHOT")
}

//获取 仓库 账户名
def getRepositoryAccount() {
    return hasProperty('NEXUS_ACC') ? NEXUS_ACC : ""
}

//获取 仓库 账号密码
def getRepositoryPassword() {
    return hasProperty('NEXUS_PWD') ? NEXUS_PWD : ""
}

//获取 仓库 url
def getRepositoryUrl() {
    return isReleaseBuild() ? RELEASE_URL : SNAPSHOT_URL
}

//配置阶段 评估完成后进入
/*
添加在评估此项目后立即调用的闭包。项目作为参数传递给闭包。
当属于此项目的构建文件被执行时，这样的侦听器会得到通知。
例如，父项目可以向其子项目添加这样的侦听器。
这样的侦听器可以根据子项目的构建文件运行后的状态进一步配置这些子项目。
*/
afterEvaluate { project ->
    uploadArchives {
        //configurations = configurations.archives
        repositories {
            mavenDeployer {

                /* 弃用了
                beforeDeplpoyment {
                    MavenDeployment deployment -> signing.signPom(deployment)
                }*/

                //配置在同级目录 gradle.properties中
                //pom.groupId = GROUP_ID                                  //唯一标识（通常为模块包名）
                //pom.artifactId = ARTIFACT_ID                            //项目名称（通常位类库模块名称）
                //pom.version = VERSION_NAME                              //版本号

                pom.project {
                    version VERSION_NAME
                    artifactId ARTIFACT_ID
                    groupId GROUP_ID
                    packaging  POM_PACKING_TYPE                              //打包下载上传格式

                    description POM_DESCRIPTION
                    name POM_NAME                                           //库名称

                    /*
                    licenses {
                        license {
                            name 'The Apache Software License, Version 2.0'
                            url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                        }
                    }*/
                }

                //指定正式版本 maven仓库url和账号密码
                repository(url: getRepositoryUrl()) {
                    authentication(userName: getRepositoryAccount(), password: getRepositoryPassword())
                }
            }
        }
    }

    /*  更多任务 对工程生成javadoc.jar、上传source.jar
    task androidJavadocs(type: Javadoc) {
        source = android.sourceSets.main.java.srcDirs
        classPath += project.files(android.getBootClasspath().join(File.pathSeparator))
    }
    task androidJavadocsJar(type: Jar, dependsOn: androidJavadocs) {
        classifier = 'javadoc'
        from androidJavadocs.destinationDir
    }
    task androidSourcesJar(type: Jar) {
        classifier = 'sources'
        from android.sourceSets.main.java.srcDirs
    }
    //解决 JavaDoc 中文注释生成失败的问题
    tasks.withType(Javadoc) {
        options.addStringOption('Xdoclint:none', '-quiet')
        options.addStringOption('encoding', 'UTF-8')
        options.addStringOption('charSet', 'UTF-8')
    }
    artifacts {
        archives androidSourcesJar
        archives androidJavadocsJar
    }*/
}

//运行这个会报错！！！！！！！！！！！！！！！！！！！！！！！！！！！！！
//配置需要上传到maven仓库的文件
/*
artifacts {
    archives file("release/TMUnityBridge.aar")
}*/

/*
uploadArchives {
    repositories {
        mavenDeployer {
            MavenDeployment deployment -> signing.signPom(deployment)
        }

        pom.version = VERSION
        pom.artifactId = ARTIFACT_ID
        pom.groupId = GROUP_ID

        repository(url: getRepositoryUrl()) {
            authentication(userName: NEXUS_ACC, password: NEXUS_PWD)
        }
    }
}
*/

//snapshot版是不需要进行数字签名的，但release必须数字签名。
//找不到
signing {
    // 当  是发布版本 & 存在 uploadArchives task 时 才执行
    required { isReleaseBuild() && gradle.taskGraph.hasTask("uploadArchives") }
    sign configurations.archives
}