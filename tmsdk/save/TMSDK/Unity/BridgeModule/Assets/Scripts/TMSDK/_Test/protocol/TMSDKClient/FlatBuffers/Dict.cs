// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace TMSDKClient.FlatBuffers
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct Dict : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static Dict GetRootAsDict(ByteBuffer _bb) { return GetRootAsDict(_bb, new Dict()); }
  public static Dict GetRootAsDict(ByteBuffer _bb, Dict obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Dict __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public TMSDKClient.FlatBuffers.DictEntry? Entries(int j) { int o = __p.__offset(4); return o != 0 ? (TMSDKClient.FlatBuffers.DictEntry?)(new TMSDKClient.FlatBuffers.DictEntry()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int EntriesLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }
  public TMSDKClient.FlatBuffers.DictEntry? EntriesByKey(string key) { int o = __p.__offset(4); return o != 0 ? TMSDKClient.FlatBuffers.DictEntry.__lookup_by_key(__p.__vector(o), key, __p.bb) : null; }

  public static Offset<TMSDKClient.FlatBuffers.Dict> CreateDict(FlatBufferBuilder builder,
      VectorOffset entriesOffset = default(VectorOffset)) {
    builder.StartTable(1);
    Dict.AddEntries(builder, entriesOffset);
    return Dict.EndDict(builder);
  }

  public static void StartDict(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddEntries(FlatBufferBuilder builder, VectorOffset entriesOffset) { builder.AddOffset(0, entriesOffset.Value, 0); }
  public static VectorOffset CreateEntriesVector(FlatBufferBuilder builder, Offset<TMSDKClient.FlatBuffers.DictEntry>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateEntriesVectorBlock(FlatBufferBuilder builder, Offset<TMSDKClient.FlatBuffers.DictEntry>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartEntriesVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<TMSDKClient.FlatBuffers.Dict> EndDict(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<TMSDKClient.FlatBuffers.Dict>(o);
  }
};


}
