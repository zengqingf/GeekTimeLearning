// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace TMSDKClient.FlatBuffers
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct CallInfo : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static CallInfo GetRootAsCallInfo(ByteBuffer _bb) { return GetRootAsCallInfo(_bb, new CallInfo()); }
  public static CallInfo GetRootAsCallInfo(ByteBuffer _bb, CallInfo obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public CallInfo __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string CallMethodName { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCallMethodNameBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetCallMethodNameBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetCallMethodNameArray() { return __p.__vector_as_array<byte>(4); }
  public TMSDKClient.FlatBuffers.Dict? CallMethodParams { get { int o = __p.__offset(6); return o != 0 ? (TMSDKClient.FlatBuffers.Dict?)(new TMSDKClient.FlatBuffers.Dict()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public bool IsCallback { get { int o = __p.__offset(8); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public string CallbackId { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetCallbackIdBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetCallbackIdBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetCallbackIdArray() { return __p.__vector_as_array<byte>(10); }

  public static Offset<TMSDKClient.FlatBuffers.CallInfo> CreateCallInfo(FlatBufferBuilder builder,
      StringOffset callMethodNameOffset = default(StringOffset),
      Offset<TMSDKClient.FlatBuffers.Dict> callMethodParamsOffset = default(Offset<TMSDKClient.FlatBuffers.Dict>),
      bool isCallback = false,
      StringOffset callbackIdOffset = default(StringOffset)) {
    builder.StartTable(4);
    CallInfo.AddCallbackId(builder, callbackIdOffset);
    CallInfo.AddCallMethodParams(builder, callMethodParamsOffset);
    CallInfo.AddCallMethodName(builder, callMethodNameOffset);
    CallInfo.AddIsCallback(builder, isCallback);
    return CallInfo.EndCallInfo(builder);
  }

  public static void StartCallInfo(FlatBufferBuilder builder) { builder.StartTable(4); }
  public static void AddCallMethodName(FlatBufferBuilder builder, StringOffset callMethodNameOffset) { builder.AddOffset(0, callMethodNameOffset.Value, 0); }
  public static void AddCallMethodParams(FlatBufferBuilder builder, Offset<TMSDKClient.FlatBuffers.Dict> callMethodParamsOffset) { builder.AddOffset(1, callMethodParamsOffset.Value, 0); }
  public static void AddIsCallback(FlatBufferBuilder builder, bool isCallback) { builder.AddBool(2, isCallback, false); }
  public static void AddCallbackId(FlatBufferBuilder builder, StringOffset callbackIdOffset) { builder.AddOffset(3, callbackIdOffset.Value, 0); }
  public static Offset<TMSDKClient.FlatBuffers.CallInfo> EndCallInfo(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<TMSDKClient.FlatBuffers.CallInfo>(o);
  }
};


}
