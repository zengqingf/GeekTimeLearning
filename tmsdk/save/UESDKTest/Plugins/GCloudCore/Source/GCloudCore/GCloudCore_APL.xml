<?xml version="1.0" encoding="utf-8"?>

<!--LogicCore additions-->
<root xmlns:android="http://schemas.android.com/apk/res/android">
    <!-- 初始化-->
    <init>
        <log text="GCloudCore init"/>
        <setBoolFromProperty result="bGradle" ini="Engine" section="/Script/AndroidRuntimeSettings.AndroidRuntimeSettings" property="bEnableGradle" default="false"/>
        <if condition="bGradle">
            <true>
                <log text="GCloudCore Gradle Build"/>
            </true>
            <false>
                <log text="GCloudCore Ant Build"/>
            </false>
        </if>
    </init>
    
    <!--在ndk-build编译之前，从Intermediate/Android/APK中拷贝或删除文件-->
    <prebuildCopies>
        <log text="GCloudCore Copy Dirs Begin. PluginDir is $S(PluginDir), BuildDir is $S(BuildDir)"/>
        <copyDir src="$S(PluginDir)/../GCloudCoreLib/Android/GCloudCore" dst="$S(BuildDir)/JavaLibs/GCloudCore"/>
    </prebuildCopies>
    
    <!-- optional updates applied to AndroidManifest.xml -->
    <androidManifestUpdates>
    </androidManifestUpdates>
    
    <!--Gradle构建配置-->
    <buildscriptGradleAdditions>
        <insert>
            <![CDATA[
            ]]>
        </insert>
    </buildscriptGradleAdditions>
    
    <baseBuildGradleAdditions>
        <insert>
            <![CDATA[
                allprojects {
                    repositories {
                        maven { url "https://mirrors.tencent.com/nexus/repository/maven-public/" }
                        maven { url "https://mirrors.tencent.com/repository/maven/tencent_public/" }
                        maven {
                            url "http://maven.oa.com/nexus/content/groups/androidbuild"
                        }
                        maven {
                            url "http://maven.oa.com/nexus/content/repositories/google-maven"
                        }
                        maven {
                            url "http://maven.oa.com/nexus/content/repositories/jcenter"
                        }
                        flatDir name: 'libs', dirs: "$projectDir/src/main/libs"
                    }
                }
                
                ext {
                    commonVersions = [
                        compileSdkVersion: 28,
                        buildToolsVersion: '28.0.3',
                        minSdkVersion    : 15,
                        targetSdkVersion : 28,
                        versionName      : '2.0.0',
                        supportLibVersion : '28.0.0',
                    ]
                    
                    commonDependencies = [
                        "support-v4" : "com.android.support:support-v4:${commonVersions.supportLibVersion}",
                        "appcompat-v7" : "com.android.support:appcompat-v7:${commonVersions.supportLibVersion}",
                        "design" : "com.android.support:design:${commonVersions.supportLibVersion}",
                    ]
                }
            ]]>
        </insert>
    </baseBuildGradleAdditions>
    
    <buildGradleAdditions>
        <insert>
            <![CDATA[
                
            ]]>
            
        </insert>
    </buildGradleAdditions>
    
    <!-- GameActivity.java中导入类 -->
    <gameActivityImportAdditions>
        <insert>
        import java.lang.reflect.Method;
        import java.util.ArrayList;
        import java.util.List;
        
        import android.Manifest;
        import android.app.Activity;
        import android.content.Intent;
        import android.content.pm.PackageManager;
        import android.os.Bundle;
        import android.support.v4.app.ActivityCompat;
        import android.support.v4.content.ContextCompat;
        
        import com.tencent.gcloud.plugin.GCloudAppLifecycle;
        import android.util.Log;
        </insert>
    </gameActivityImportAdditions>
    
    <!--GameActivity.java导完类之后要做的事情 -->
    <gameActivityPostImportAdditions>
    </gameActivityPostImportAdditions>
    
    <!-- GameActivity.java类中添加代码 -->
    <gameActivityClassAdditions>
        <insert>
        static
        {
            //load so
            loadPluginByReflection("TDataMaster");
            loadPluginByReflection("GVoice");

        }
        
        private final int PermissionRequestCode = 100;
        public static void loadPluginByReflection(String libName)
        {
        try {
        Class&lt;?&gt;  clz = Class.forName("com.tencent.gcloud.plugin.PluginUtils");
        Method m = clz.getDeclaredMethod("loadLibrary", String.class);
        m.invoke(clz, libName);
        }
        catch (Exception e){
        e.printStackTrace();
        try{
        
        System.loadLibrary(libName);
        }
        catch(Exception ex){
        ex.printStackTrace();
        }
        }
        }

        private void RequestPermission(Activity activity, List&lt;String&gt; permissionList, int requestCode)
        {
            if(null==activity || null==permissionList){
                return;
            }
            List&lt;String&gt; permissionNeeded = new ArrayList&lt;String&gt;();
                
            for(int i=0; i&lt;permissionList.size(); i++){
                
                String permission = permissionList.get(i);
                
                if(null!=permission &amp;&amp; PackageManager.PERMISSION_GRANTED != ContextCompat.checkSelfPermission(activity.getApplicationContext(), permission)){
                    permissionNeeded.add(permission);
                }
            }
            
            if(permissionNeeded.size()&gt;0){
                ActivityCompat.requestPermissions(activity, permissionNeeded.toArray(new String[permissionNeeded.size()]), requestCode);
            }
        }

        private void GCloudSDKRequestDynamicPermissions()
        {
            List&lt;String&gt; permissions = new ArrayList&lt;String&gt;();
            //Add_Permissions
            //GCloudCore

            //GVoice
            permissions.add(Manifest.permission.MODIFY_AUDIO_SETTINGS);
            permissions.add(Manifest.permission.RECORD_AUDIO);
            permissions.add(Manifest.permission.WRITE_EXTERNAL_STORAGE);

            //TDM

            //TuringShield


            this.RequestPermission(this, permissions, PermissionRequestCode);
        }

        </insert>
    </gameActivityClassAdditions>
    
    
    <!--GameActivity.java onCreate添加代码 -->
    <gameActivityOnCreateAdditions>
        <insert>
        
        //add lifecycle observer
        //TDM
        GCloudAppLifecycle.Instance.addObserverByName("com.tdatamaster.tdm.gcloud.lifecycle.PluginReportLifecycle");

        GCloudAppLifecycle.Instance.onCreate(this, savedInstanceState);

        // Add Dynamic Permissions
        GCloudSDKRequestDynamicPermissions();
        
        </insert>
    </gameActivityOnCreateAdditions>
    
    <!--GameActivity.java onDestroy添加代码-->
    <gameActivityOnDestroyAdditions>
        <insert>
            
            
        </insert>
    </gameActivityOnDestroyAdditions>
    
    <!--GameActivity.java onStart添加代码-->
    <gameActivityOnStartAdditions>
        <insert>
        
        GCloudAppLifecycle.Instance.onStart();
            
        </insert>
    </gameActivityOnStartAdditions>
    
    <!--GameActivity.java OnRestart添加代码-->
    <gameActivityOnRestartAdditions>
        <insert>
            
        GCloudAppLifecycle.Instance.onRestart();
            
        </insert>
    </gameActivityOnRestartAdditions>
    
    <!--GameActivity.java onStop添加代码-->
    <gameActivityOnStopAdditions>
        <insert>
            
        GCloudAppLifecycle.Instance.onStop();
            
        </insert>
    </gameActivityOnStopAdditions>
    
    <!--GameActivity.java onPause添加代码-->
    <gameActivityOnPauseAdditions>
        <insert>
            
        GCloudAppLifecycle.Instance.onPause();
            
        </insert>
    </gameActivityOnPauseAdditions>
    
    <!--GameActivity.java onResume添加代码-->
    <gameActivityOnResumeAdditions>
        <insert>
            
        GCloudAppLifecycle.Instance.onResume();
            
        </insert>
    </gameActivityOnResumeAdditions>
    
    <!-- GameActivity.java onActivityResult添加代码 -->
    <gameActivityOnActivityResultAdditions>
        <insert>
        GCloudAppLifecycle.Instance.onActivityResult(requestCode, resultCode, data);
        </insert>
    </gameActivityOnActivityResultAdditions>
    
    <!--GameActivity.java OnNewIntent添加代码-->
    <gameActivityOnNewIntentAdditions>
        <insert>
        GCloudAppLifecycle.Instance.onNewIntent(newIntent);
        </insert>
    </gameActivityOnNewIntentAdditions>
    
    <!--在libUE4.so库加载之前需要加载的库-->
    <soLoadLibrary>
        <loadLibrary name="gcloudcore" failmsg="abase library not loaded and required!"/>
    </soLoadLibrary>
    
    <proguardAdditions>
        
        <insert>
            -optimizationpasses 5
            -dontusemixedcaseclassnames
            -dontskipnonpubliclibraryclasses
            -dontpreverify
            -dontoptimize
            -ignorewarnings
            -verbose
            -optimizations !code/simplification/arithmetic,!field/*,!class/merging/*
            
            -dontwarn org.apache.**
            -dontwarn com.alipay.**
            
            -keep class com.epicgames.**{*;}
            -keep class com.tencent.abase.**{*;}
            -keep class com.tencent.gcloud.**{*;}
            -keep class com.gcore.gcloud.**{*;}
            
            -keep public class * extends android.app.Activity
            -keep public class * extends android.app.Application
            -keep public class * extends android.app.Service
            -keep public class * extends android.content.BroadcastReceiver
            -keep public class * extends android.content.ContentProvider
            -keep public class * extends android.app.backup.BackupAgentHelper
            -keep public class * extends android.preference.Preference
            -keep public class com.android.vending.licensing.ILicensingService
            
            -keepclassmembers enum * {
            public static **[] values();
            public static ** valueOf(java.lang.String);
            }
            
            -keep class * implements android.os.Parcelable {
            public static final android.os.Parcelable$Creator *;
            }
                       
            -keepattributes InnerClasses
            #------------------  下方是共性的排除项目         ----------------
            # 方法名中含有“JNI”字符的，认定是Java Native Interface方法，自动排除
            # 方法名中含有“JRI”字符的，认定是Java Reflection Interface方法，自动排除
            
            -keepclasseswithmembers class * {
            ... *JNI*(...);
            }
            
            -keepclasseswithmembernames class * {
            ... *JRI*(...);
            }
            
            -keep class **JNI* {*;}
            -keep class android.app.** {
            *;
            }
        </insert>
    </proguardAdditions>
</root>

