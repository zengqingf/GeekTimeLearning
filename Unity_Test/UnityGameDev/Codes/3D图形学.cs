/*
ref: https://www.cnblogs.com/mengdd/archive/2011/08/30/2598025.html
3D顶点转换和法线转换
1. 转换流程之顶点转换
　　物体顶点是相对于物体自身坐标系而言的数据，要进行一系列转换才最后显示在屏幕上：
    a. 物体坐标系到世界坐标系。
       乘以World矩阵，包含了物体的平移旋转和缩放。

    b. 世界坐标系到相机坐标系。
       乘以View矩阵。
       该矩阵实际上是相机相对于世界坐标系转换的逆矩阵。
       所以相机的世界坐标系位置可以用View矩阵的逆矩阵的平移向量表示出来。


    c. 相机坐标系到标准视体空间的变换。
       乘以Projection矩阵。
       根据Projection矩阵的不同，有正交和投影变换两种结果。
　　    这步操作的实际意义是将视锥空间内的点变换进入一个标准观察体，从而方便剪裁。
　　    不同API标准观察体的设置不同:
　　        DirectX的标准观察体最小拐角（-1，-1，0）最大拐角（1，1，1），
　　        OpenGL最小拐角（-1，-1，-1）最大拐角（1，1，1），二者区别在于Z的范围不同。
　　        注意透视变换是非线性变换，会使得w值变化，不再是1。

    d. 完成剪裁后接着对应到屏幕空间。
        这步完成3D到2D的映射，对应成屏幕像素显示。

2.  转换流程之法向量变换
    光照计算常常需要用法向量，但是法向量的转换和顶点转换并不完全相同。
    　不同点主要体现在上述过程中的第一步。即从物体坐标系变换到世界坐标系。
　　
    首先法向量表示的是方向，平移是不必要的。（由于法向量多是3D向量或第四位为0，其实变换矩阵的平移部分是不起作用的）。
　　那么法向量变换就只剩旋转和缩放。
　　而法向量的旋转和顶点的旋转保持一致即可，因为转过的角度是相同的。
　　但是直接用World矩阵直接对法向量进行变换有可能是不对的！！
　　为什么呢，主要就是在于缩放有可能不是三个坐标方向的等比例缩放。
　　因为如果模型被不成比例的缩放，在不同方向上会有不同程度的拉伸或者压缩，顶点的坐标会因而伸缩。
　　
    但是如果对法向量进行同样的伸缩，那么法向量将不再垂直于对应的表面（顶点的法向量是该顶点所在几个表面法向量的平均值）。
　　此时要对法向量进行正确的变换，应该是对其进行相反的缩放（比如xy是1：2缩放，那么法向量xy就要2:1缩放。）
　　所以法向量的变换矩阵中缩放矩阵应该是原来顶点变换缩放矩阵的逆矩阵。
　　这个怎么做到呢，如前所述，缩放矩阵并不是正交矩阵，不能通过转置来得到逆矩阵。直接对原来的world矩阵求逆的话，旋转的部分也同时被求逆了。但是旋转又要求用原来的旋转。
　　
    但是旋转矩阵是正交矩阵，转置后即可得到逆矩阵。
 　 于是可以采用这样的方法:对World矩阵求逆，这样就同时得到了旋转和缩放的逆，然后进行转置再将旋转矩阵变回来，因为缩放系数在对角线上所以不会有影响。这样得到的变换矩阵就可以用来正确变换法向量了。
　　
    关于转置，可以变换矩阵和向量相乘的顺序，这样就相当于和转置矩阵相乘了。
　　所以要做的只是求出逆矩阵，然后变换矩阵和向量原来的相乘顺序。

    注意就是因为法向量变换的问题是由于非等比例缩放引起的，如果原来的World矩阵三个方向缩放系数相等，那么用原来的World矩阵变换法向量是没有问题的。

*/


/*
3D数学基础

   3D世界中的点和方向多用一个4D向量表示，前三个向量是XYZ，第四个分量是W.
　　第四个分量的引入有两个作用：一是为了区分向量和点。二是为了进行变换。
　　W=1表示点，可以平移。
　　W=0表示向量，平移对其不起作用。因为它只是用来表示方向的。


　　3D中常用的变换多是用矩阵和向量相乘来实现，和4D向量相乘，所需要的变换矩阵是4×4的形式，可以实现平移、旋转、缩放。
　　因为图形API的不同，向量和矩阵的形式会对应不同。
    　　DirectX使用行向量，行向量左乘矩阵得到行向量。转换顺序是从左往右发生：vABC，表示v向量先进行A转换，再B，再C.
　　    OpenGL使用列向量，列向量右乘矩阵得到列向量。转换时从右往左：CBAv。

线性代数
　　首先弄清楚线性代数中的几个概念：
　　转置矩阵：一个矩阵的转置矩阵就是将这个矩阵的行列交换。
　　逆矩阵：一个矩阵乘以它的逆矩阵得到单位矩阵。
　　正交矩阵：若一个矩阵的转置矩阵就是它的逆矩阵，那么这个矩阵就是正交矩阵。

　转换矩阵包含了平移、旋转、缩放。
　　一个矩阵可以单纯地表示一种变换，如只表示平移，可以将它称为平移矩阵。
　　矩阵也可以同时表达多种变换，
    如将平移矩阵和旋转矩阵相乘就可以得到先平移后旋转的矩阵。注意矩阵相乘的顺序很重要，交换顺序后得到的结果不同。
　　
    根据逆矩阵的性质可以知道，逆矩阵表达的是相反的变换，乘以变换矩阵后再乘以逆矩阵等于总体乘以了一个单位矩阵。
　　平移矩阵的逆矩阵可以直接将平移参数取负。（前后加减平移参数得0）。
　　缩放矩阵的逆矩阵就是将对角线上的三个缩放参数取自身的倒数。（前后相乘缩放参数得1）。
　　旋转矩阵的逆矩阵可以将旋转的角度参数取负，表示再转过相反的角度。
　　可以发现只有旋转矩阵的逆矩阵是转置得到的，所以只有旋转矩阵是正交矩阵。
*/
public class TestCode
{
    
}